import React, { createContext, useContext, useEffect, useState } from 'react';
import { ImageContext } from './ImageContext';
import { getAuth, onAuthStateChanged, signOut } from 'firebase/auth';
import axios from 'axios';

const initialUser = {
  email: '',
  firstName: '',
  lastName: '',
  phone: '',
  address: '',
  role: 'user',
  cart: [],
  likes: [],
  transaction: [],
};

export const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const { images } = useContext(ImageContext);

  const [user, setUser] = useState(null);
  const [userInfo, setUserInfo] = useState(() => {
    const storedUserInfo = localStorage.getItem('userInfo');
    return storedUserInfo ? JSON.parse(storedUserInfo) : initialUser;
  });

  console.log(userInfo);

  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(getAuth(), async (user) => {
      if (user) {
        // User is signed in, load data from the server
        try {
          const response = await axios.get(`/api/user/${user.uid}`);
          setUser(user);
          setUserInfo(response.data);
          localStorage.setItem('userInfo', JSON.stringify(response.data));
        } catch (error) {
          console.log('Error loading user data:', error);
        }
      } else {
        // User is signed out, reset the user state
        setUser(null);
        setUserInfo(initialUser);
        localStorage.removeItem('userInfo');
      }

      setIsLoading(false);
    });

    // Load user data from localStorage if available
    const storedUserInfo = localStorage.getItem('userInfo');
    if (storedUserInfo) {
      setUserInfo(JSON.parse(storedUserInfo));
    }

    return unsubscribe;
  }, []);

  const handleSignOut = async () => {
    try {
      updateUserCartLiked();
      const auth = getAuth();
      await signOut(auth);
      setUser(null);
      setUserInfo(initialUser);
      localStorage.removeItem('userInfo');
    } catch (error) {
      console.log('Error signing out:', error);
    }
  };

  const handleAddToCart = async (imageId) => {
    // Check if the image already exists in the cart
    const isAlreadyInCart = userInfo.cart.some(
      (image) => image._id === imageId
    );

    if (isAlreadyInCart) {
      // Product ID already exists in the cart, handle accordingly
      console.log('Image already exists in the cart.');
      return;
    }

    // Add the image to the cart
    const addedImage = images.find((image) => image._id === imageId);
    const updatedUserInfo = {
      ...userInfo,
      cart: [...userInfo.cart, addedImage],
    };
    setUserInfo(updatedUserInfo);
    localStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));
    console.log(`Adding image`, addedImage);
    console.log(updatedUserInfo);
  };

  const handleDeleteFromCart = (imageId) => {
    const updatedCart = userInfo.cart.filter((image) => image._id !== imageId);
    const updatedUserInfo = { ...userInfo, cart: updatedCart };

    setUserInfo(updatedUserInfo);
    localStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));
  };

  const handleToggleLike = (imageId) => {
    const isLiked = userInfo.likes.some((image) => image._id === imageId);

    if (isLiked) {
      // Image is already liked, remove it from user's liked images
      const updatedLikes = userInfo.likes.filter(
        (image) => image._id !== imageId
      );
      const updatedUserInfo = { ...userInfo, likes: updatedLikes };
      setUserInfo(updatedUserInfo);
      localStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));
      console.log(`Removed image ${imageId} from liked images`);
      console.log(updatedUserInfo);
    } else {
      // Image is not liked, add it to user's liked images
      const addedImage = images.find((image) => image._id === imageId);
      const updatedUserInfo = {
        ...userInfo,
        likes: [...userInfo.likes, addedImage],
      };
      setUserInfo(updatedUserInfo);
      localStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));
      console.log(`Added image`, addedImage);
      console.log(updatedUserInfo);
    }
  };

  const updateUserCartLiked = async (e) => {
    const token = user && (await user.getIdToken());
    const headers = token ? { authtoken: token } : {};

    // Check if the user information is already present and send it to the backend
    const parsedUserInfo = JSON.parse(localStorage.getItem('userInfo'));
    console.log(parsedUserInfo);
    if (user && parsedUserInfo) {
      const cartIds = parsedUserInfo.cart
        ? parsedUserInfo.cart.map((item) => item._id)
        : [];
      const likesIds = parsedUserInfo.likes
        ? parsedUserInfo.likes.map((item) => item._id)
        : [];
      console.log(cartIds);
      axios.post(
        `/api/user/updateCart_Liked`,
        { cart: cartIds, likes: likesIds },
        { headers }
      );
    }
  };

  return (
    <UserContext.Provider
      value={{
        user,
        setUser,
        userInfo,
        setUserInfo,
        handleSignOut,
        handleAddToCart,
        handleToggleLike,
        handleDeleteFromCart,
      }}
    >
      {children}
    </UserContext.Provider>
  );
};


import fs from 'fs';
import admin from 'firebase-admin';
import express from 'express';
import 'dotenv/config';
import { db, connectToDb } from './db.js';
import Stripe from 'stripe';
import path from 'path';
import { ObjectId } from 'mongodb';

import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// initialize firebase
const credentials = JSON.parse(fs.readFileSync('./credentials.json'));
admin.initializeApp({
  credential: admin.credential.cert(credentials),
});

const app = express();

// This is a public sample test API key.
// Donâ€™t submit any personally identifiable information in requests made with this key.
// Sign in to see your own test API key embedded in code samples.
const stripe = new Stripe(process.env.STRIPE_S_KEYS);

app.use(express.static('public'));
app.use(express.json());

// Serve static files from the "images" directory
app.use('/images', express.static(path.join(__dirname, 'images')));

const calculateOrderAmount = (items) => {
  // Replace this constant with a calculation of the order's amount
  // Calculate the order total on the server to prevent
  // people from directly manipulating the amount on the client
  return 1400;
};
app.post('/create-payment-intent', async (req, res) => {
  const { items } = req.body;
  // Create a PaymentIntent with the order amount and currency
  const paymentIntent = await stripe.paymentIntents.create({
    amount: calculateOrderAmount(items),
    currency: 'cad',
    automatic_payment_methods: {
      enabled: true,
    },
  });
  res.send({
    clientSecret: paymentIntent.client_secret,
  });
});

// Define a route for handling user registration
app.post('/api/user/register', async (req, res) => {
  console.log(req.body);
  try {
    // Create a new Firebase user
    const firebaseUser = await admin.auth().createUser({
      email: req.body.email,
      password: req.body.password,
    });

    // Create a new user document
    const user = {
      uid: firebaseUser.uid,
      email: req.body.email,
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      phone: req.body.phone,
      address: req.body.address,
      role: 'user',
      cart: [],
      like: [],
      transaction: [],
    };

    // Save the user document to the 'users' collection
    await db.collection('users').insertOne(user);

    res.status(200).json({ message: 'User registered successfully' });
  } catch (error) {
    res
      .status(500)
      .json({ error: 'An error occurred while registering the user' });
  }
});

// handle user login
app.get('/api/user/:uid', async (req, res) => {
  try {
    const uid = req.params.uid;
    const user = await db.collection('users').findOne({ uid });

    if (user) {
      const cartIds = user.cart.map((item) => {
        const image = db
          .collection('images')
          .find((image) => image._id === item._id);
        return image ? image : null;
      });

      const likesIds = user.likes.map((item) => {
        const image = db
          .collection('images')
          .find((image) => image._id === item._id);
        return image ? image : null;
      });

      const currentUser = {
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        phone: user.phone,
        address: user.address,
        role: user.role,
        cart: cartIds || [], // If cart is empty, provide an empty array as default
        likes: likesIds || [], // If likes is empty, provide an empty array as default
        transaction: user.transaction,
      };

      res.status(200).json(currentUser);
    } else {
      res.status(404).json({ error: 'User not found' });
    }
  } catch (error) {
    res
      .status(500)
      .json({ error: 'An error occurred while fetching user data' });
  }
});

app.get('/api/images', async (req, res) => {
  // Extract the query parameters
  const currentPage = req.query.page;
  const imagesPerPage = req.query.perPage;

  const indexOfLastItem = currentPage * imagesPerPage;
  const indexOfFirstItem = indexOfLastItem - imagesPerPage;
  try {
    const images = await db.collection('images').find().toArray();

    let currentItems;
    if (images.length <= imagesPerPage) {
      currentItems = images; // Use all images if there are fewer than imagesPerPage
    } else {
      currentItems = images.slice(indexOfFirstItem, indexOfLastItem);
    }

    // Update imageLocation to the image file path
    currentItems = currentItems.map((item) => {
      const imageURL = `/images/raws/${path.basename(item.imageLocation)}`;
      return { ...item, imageLocation: imageURL };
    });

    const totalPages = Math.ceil(images.length / imagesPerPage);
    res.json({ images: currentItems, totalPages: totalPages });
  } catch (error) {
    res
      .status(500)
      .json({ error: 'An error occurred while fetching images data' });
  }
});

// app.post('/api/url', async (req, res) => {
//   console.log(req.body);
// });

app.use(async (req, res, next) => {
  const { authtoken } = req.headers;

  if (authtoken) {
    try {
      req.user = await admin.auth().verifyIdToken(authtoken);
    } catch (e) {
      return res.sendStatus(400);
    }
  }

  req.user = req.user || {};

  next();
});

app.post('/api/user/profile/', async (req, res) => {
  const { uid } = req.user;

  try {
    const { email, firstName, lastName, phone, address } = req.body;

    // Update the user document in the MongoDB collection
    const updatedUser = await db.collection('users').findOneAndUpdate(
      { uid: uid }, // Filter criteria
      {
        $set: {
          email: email,
          firstName: firstName,
          lastName: lastName,
          phone: phone,
          address: address,
        },
      },
      { returnOriginal: false } // Set returnOriginal option to false to get the updated document
    );

    if (!updatedUser.value) {
      throw new Error('User not found');
    }

    console.log(updatedUser.value); // Log the updated user document

    res.sendStatus(200); // Send a successful response
  } catch (error) {
    console.error(error);
    res.status(500).send('An error occurred while updating the user profile');
  }
});

app.post('/api/user/updateCart_Liked/', async (req, res) => {
  const { uid } = req.user;

  try {
    const { cart, likes } = req.body;
    console.log(req.body);
    // Convert cart and likes arrays to contain ObjectId values
    const cartObjectId = cart.map((id) => new ObjectId(id));
    const likesObjectId = likes.map((id) => new ObjectId(id));
    console.log(cartObjectId);
    console.log(likesObjectId);
    // Update the user document in the MongoDB collection
    const updatedUser = await db.collection('users').findOneAndUpdate(
      { uid: uid }, // Filter criteria
      {
        $set: {
          cart: cartObjectId,
          likes: likesObjectId,
        },
      },
      { returnOriginal: false } // Set returnOriginal option to false to get the updated document
    );

    if (!updatedUser.value) {
      throw new Error('User not found');
    }

    console.log(updatedUser.value); // Log the updated user document

    res.sendStatus(200); // Send a successful response
  } catch (error) {
    console.error(error);
    res.status(500).send('An error occurred while updating the user profile');
  }
});

app.get('/api/images/:imageId', async (req, res) => {
  const { imageId } = req.params;
  const id = new ObjectId(imageId);

  //const { uid } = req.user;
  const status = { isLiked: false, isInCart: false };
  const image = await db.collection('images').findOne({ _id: id });

  if (image) {
    // const userInfo = await db.collection('users').findOne({ uid: uid });

    // status.isLiked =
    //   uid && userInfo.likes.some((likedImage) => likedImage === image._id);
    // status.isInCart =
    //   uid && userInfo.likes.some((cartImage) => cartImage === image._id);
    const imageURL = `/images/raws/${path.basename(image.imageLocation)}`;
    const updatedImage = { ...image, imageLocation: imageURL };

    res.json({ image: updatedImage, status: status });
    console.log(updatedImage);
  } else {
    res.sendStatus(404);
  }
});

connectToDb(() => {
  console.log('Successfully Connect to Database');
  app.listen(8080, () => {
    console.log('Server is listening on port 8080');
  });
});
